/*
 * DeployRClient
 * Integration technology for deploying R and Python analytics inside web, desktop, mobile, and dashboard applications as well as backend systems. Turn your R or Python scripts into analytics web services, so code can be easily executed by applications running on a secure server.  The core APIs can be grouped into several categories, including: [Authentication](#authentication-apis), [Web Services](#services-management-apis), [Sessions](#session-apis), [Snapshots](#snapshot-apis), [Status](#status-apis), and [Centralized Configuration](#centralized-configuration-apis). 
 *
 * OpenAPI spec version: 9.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.Error;
import java.io.File;
import io.swagger.client.model.PublishWebServiceRequest;
import io.swagger.client.model.WebService;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicesManagementAPIsApi
 */
@Ignore
public class ServicesManagementAPIsApiTest {

    private final ServicesManagementAPIsApi api = new ServicesManagementAPIsApi();

    
    /**
     * Delete Service
     *
     * Deletes the published web service for the logged in user.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWebServiceVersionTest() throws ApiException {
        String name = null;
        String version = null;
        api.deleteWebServiceVersion(name, version);

        // TODO: test validations
    }
    
    /**
     * Get Service by &#x60;name&#x60;
     *
     * Lists all the published services with the provided &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllWebServiceVersionsByNameTest() throws ApiException {
        String name = null;
        List<WebService> response = api.getAllWebServiceVersionsByName(name);

        // TODO: test validations
    }
    
    /**
     * Get Services
     *
     * Lists all the published services.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllWebServicesTest() throws ApiException {
        List<WebService> response = api.getAllWebServices();

        // TODO: test validations
    }
    
    /**
     * Get Service by &#x60;name&#x60; and &#x60;version&#x60;
     *
     * Lists all the published services with the provided &#x60;name&#x60; and &#x60;version&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebServiceVersionTest() throws ApiException {
        String name = null;
        String version = null;
        List<WebService> response = api.getWebServiceVersion(name, version);

        // TODO: test validations
    }
    
    /**
     * Patch realtime web service
     *
     * Updates the published realtime web service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchRealtimeWebServiceByNameVersionTest() throws ApiException {
        String name = null;
        String version = null;
        String description = null;
        String operationId = null;
        File model = null;
        String response = api.patchRealtimeWebServiceByNameVersion(name, version, description, operationId, model);

        // TODO: test validations
    }
    
    /**
     * Patch Service
     *
     * Updates the published service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchWebServiceVersionTest() throws ApiException {
        String name = null;
        String version = null;
        PublishWebServiceRequest patchRequest = null;
        String response = api.patchWebServiceVersion(name, version, patchRequest);

        // TODO: test validations
    }
    
    /**
     * Create realtime web service by &#x60;name&#x60;
     *
     * Publish the realtime web services for the logged in user with given name and a unique version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publishRealtimeWebServiceByNameTest() throws ApiException {
        String name = null;
        File model = null;
        String description = null;
        String operationId = null;
        String response = api.publishRealtimeWebServiceByName(name, model, description, operationId);

        // TODO: test validations
    }
    
    /**
     * Create realtime web service by &#x60;name&#x60; and &#x60;version&#x60;.
     *
     * Publish the realtime web services for the logged in user with given name and given version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publishRealtimeWebServiceByNameVersionTest() throws ApiException {
        String name = null;
        String version = null;
        File model = null;
        String description = null;
        String operationId = null;
        String response = api.publishRealtimeWebServiceByNameVersion(name, version, model, description, operationId);

        // TODO: test validations
    }
    
    /**
     * Create Service by &#x60;name&#x60;
     *
     * Publish the web services for the logged in user with given name and a unique version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publishWebServiceTest() throws ApiException {
        String name = null;
        PublishWebServiceRequest publishRequest = null;
        String response = api.publishWebService(name, publishRequest);

        // TODO: test validations
    }
    
    /**
     * Create Service by &#x60;name&#x60; and &#x60;version&#x60;
     *
     * Publish the web service for the logged in user with given name and version.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void publishWebServiceVersionTest() throws ApiException {
        String name = null;
        String version = null;
        PublishWebServiceRequest publishRequest = null;
        String response = api.publishWebServiceVersion(name, version, publishRequest);

        // TODO: test validations
    }
    
}
