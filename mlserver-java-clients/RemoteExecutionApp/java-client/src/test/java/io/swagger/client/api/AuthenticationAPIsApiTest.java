/*
 * DeployRClient
 * Integration technology for deploying R and Python analytics inside web, desktop, mobile, and dashboard applications as well as backend systems. Turn your R or Python scripts into analytics web services, so code can be easily executed by applications running on a secure server.  The core APIs can be grouped into several categories, including: [Authentication](#authentication-apis), [Web Services](#services-management-apis), [Sessions](#session-apis), [Snapshots](#snapshot-apis), [Status](#status-apis), and [Centralized Configuration](#centralized-configuration-apis). 
 *
 * OpenAPI spec version: 9.2.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AccessTokenResponse;
import io.swagger.client.model.Error;
import io.swagger.client.model.LoginRequest;
import io.swagger.client.model.RenewTokenRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationAPIsApi
 */
@Ignore
public class AuthenticationAPIsApiTest {

    private final AuthenticationAPIsApi api = new AuthenticationAPIsApi();

    
    /**
     * Login User
     *
     * Logs the user in.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        LoginRequest loginRequest = null;
        AccessTokenResponse response = api.login(loginRequest);

        // TODO: test validations
    }
    
    /**
     * Refresh User Access Token
     *
     * The user renews access token and refresh token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void renewTokenTest() throws ApiException {
        RenewTokenRequest renewTokenRequest = null;
        AccessTokenResponse response = api.renewToken(renewTokenRequest);

        // TODO: test validations
    }
    
    /**
     * Delete User Access Token
     *
     * The user revokes a refresh token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeRefreshTokenTest() throws ApiException {
        String refreshToken = null;
        AccessTokenResponse response = api.revokeRefreshToken(refreshToken);

        // TODO: test validations
    }
    
}
