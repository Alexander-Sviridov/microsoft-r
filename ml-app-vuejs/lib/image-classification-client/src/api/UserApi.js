/**
 * ImageClassification
 * service for image classification
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AccessTokenResponse', 'model/Error', 'model/LoginRequest', 'model/RenewTokenRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AccessTokenResponse'), require('../model/Error'), require('../model/LoginRequest'), require('../model/RenewTokenRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ImageClassification) {
      root.ImageClassification = {};
    }
    root.ImageClassification.UserApi = factory(root.ImageClassification.ApiClient, root.ImageClassification.AccessTokenResponse, root.ImageClassification.Error, root.ImageClassification.LoginRequest, root.ImageClassification.RenewTokenRequest);
  }
}(this, function(ApiClient, AccessTokenResponse, Error, LoginRequest, RenewTokenRequest) {
  'use strict';

  /**
   * User service.
   * @module api/UserApi
   * @version 1.0.0
   */

  /**
   * Constructs a new UserApi. 
   * @alias module:api/UserApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/UserApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logs the user in
     * @param {module:model/LoginRequest} loginRequest 
     * @param {module:api/UserApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessTokenResponse}
     */
    this.login = function(loginRequest, callback) {
      var postBody = loginRequest;

      // verify the required parameter 'loginRequest' is set
      if (loginRequest === undefined || loginRequest === null) {
        throw new Error("Missing the required parameter 'loginRequest' when calling login");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccessTokenResponse;

      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the renewToken operation.
     * @callback module:api/UserApi~renewTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The user renews access token and refresh token
     * @param {module:model/RenewTokenRequest} renewTokenRequest 
     * @param {module:api/UserApi~renewTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessTokenResponse}
     */
    this.renewToken = function(renewTokenRequest, callback) {
      var postBody = renewTokenRequest;

      // verify the required parameter 'renewTokenRequest' is set
      if (renewTokenRequest === undefined || renewTokenRequest === null) {
        throw new Error("Missing the required parameter 'renewTokenRequest' when calling renewToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccessTokenResponse;

      return this.apiClient.callApi(
        '/login/refreshToken', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeRefreshToken operation.
     * @callback module:api/UserApi~revokeRefreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The user revokes a refresh token
     * @param {String} refreshToken The refresh token to be revoked
     * @param {module:api/UserApi~revokeRefreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessTokenResponse}
     */
    this.revokeRefreshToken = function(refreshToken, callback) {
      var postBody = null;

      // verify the required parameter 'refreshToken' is set
      if (refreshToken === undefined || refreshToken === null) {
        throw new Error("Missing the required parameter 'refreshToken' when calling revokeRefreshToken");
      }


      var pathParams = {
      };
      var queryParams = {
        'refreshToken': refreshToken,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AccessTokenResponse;

      return this.apiClient.callApi(
        '/login/refreshToken', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
