/**
 * ImageClassification
 * service for image classification
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BatchWebServiceResult', 'model/Error', 'model/InputParameters', 'model/StartBatchExecutionResponse', 'model/WebServiceResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BatchWebServiceResult'), require('../model/Error'), require('../model/InputParameters'), require('../model/StartBatchExecutionResponse'), require('../model/WebServiceResult'));
  } else {
    // Browser globals (root is window)
    if (!root.ImageClassification) {
      root.ImageClassification = {};
    }
    root.ImageClassification.ImageClassificationApi = factory(root.ImageClassification.ApiClient, root.ImageClassification.BatchWebServiceResult, root.ImageClassification.Error, root.ImageClassification.InputParameters, root.ImageClassification.StartBatchExecutionResponse, root.ImageClassification.WebServiceResult);
  }
}(this, function(ApiClient, BatchWebServiceResult, Error, InputParameters, StartBatchExecutionResponse, WebServiceResult) {
  'use strict';

  /**
   * ImageClassification service.
   * @module api/ImageClassificationApi
   * @version 1.0.0
   */

  /**
   * Constructs a new ImageClassificationApi. 
   * @alias module:api/ImageClassificationApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelAndDeleteBatchExecution operation.
     * @callback module:api/ImageClassificationApi~cancelAndDeleteBatchExecutionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels and deletes all batch executions for ImageClassification.
     * @param {String} executionId Execution id of the execution.
     * @param {module:api/ImageClassificationApi~cancelAndDeleteBatchExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.cancelAndDeleteBatchExecution = function(executionId, callback) {
      var postBody = null;

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling cancelAndDeleteBatchExecution");
      }


      var pathParams = {
        'executionId': executionId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/api/ImageClassification/1.0.0/batch/{executionId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchExecutionFile operation.
     * @callback module:api/ImageClassificationApi~getBatchExecutionFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific file from an execution in ImageClassification.
     * @param {String} executionId Execution id of the execution
     * @param {Number} index Index of the execution in the batch.
     * @param {String} fileName Name of the file to be returned.
     * @param {module:api/ImageClassificationApi~getBatchExecutionFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.getBatchExecutionFile = function(executionId, index, fileName, callback) {
      var postBody = null;

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getBatchExecutionFile");
      }

      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling getBatchExecutionFile");
      }

      // verify the required parameter 'fileName' is set
      if (fileName === undefined || fileName === null) {
        throw new Error("Missing the required parameter 'fileName' when calling getBatchExecutionFile");
      }


      var pathParams = {
        'executionId': executionId,
        'index': index,
        'fileName': fileName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/api/ImageClassification/1.0.0/batch/{executionId}/{index}/files/{fileName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchExecutionFiles operation.
     * @callback module:api/ImageClassificationApi~getBatchExecutionFilesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all files from an individual execution in ImageClassification.
     * @param {String} executionId Execution id of the execution
     * @param {Number} index Index of the execution in the batch.
     * @param {module:api/ImageClassificationApi~getBatchExecutionFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getBatchExecutionFiles = function(executionId, index, callback) {
      var postBody = null;

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getBatchExecutionFiles");
      }

      // verify the required parameter 'index' is set
      if (index === undefined || index === null) {
        throw new Error("Missing the required parameter 'index' when calling getBatchExecutionFiles");
      }


      var pathParams = {
        'executionId': executionId,
        'index': index
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/api/ImageClassification/1.0.0/batch/{executionId}/{index}/files', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchExecutionStatus operation.
     * @callback module:api/ImageClassificationApi~getBatchExecutionStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchWebServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all batch executions for ImageClassification.
     * @param {String} executionId Execution id of the execution
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.showPartialResults Returns the already processed results of the batch execution even if it hasn&#39;t been fully completed.
     * @param {module:api/ImageClassificationApi~getBatchExecutionStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchWebServiceResult}
     */
    this.getBatchExecutionStatus = function(executionId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling getBatchExecutionStatus");
      }


      var pathParams = {
        'executionId': executionId
      };
      var queryParams = {
        'showPartialResults': opts['showPartialResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = BatchWebServiceResult;

      return this.apiClient.callApi(
        '/api/ImageClassification/1.0.0/batch/{executionId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatchExecutions operation.
     * @callback module:api/ImageClassificationApi~getBatchExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<'String'>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all batch executions for ImageClassification.
     * @param {module:api/ImageClassificationApi~getBatchExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<'String'>}
     */
    this.getBatchExecutions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ['String'];

      return this.apiClient.callApi(
        '/api/ImageClassification/1.0.0/batch', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the runInferenceOnImage operation.
     * @callback module:api/ImageClassificationApi~runInferenceOnImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebServiceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consume the ImageClassification web service.
     * @param {module:model/InputParameters} webServiceParameters Input parameters to the web service.
     * @param {module:api/ImageClassificationApi~runInferenceOnImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebServiceResult}
     */
    this.runInferenceOnImage = function(webServiceParameters, callback) {
      var postBody = webServiceParameters;

      // verify the required parameter 'webServiceParameters' is set
      if (webServiceParameters === undefined || webServiceParameters === null) {
        throw new Error("Missing the required parameter 'webServiceParameters' when calling runInferenceOnImage");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = WebServiceResult;

      return this.apiClient.callApi(
        '/api/ImageClassification/1.0.0', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the startBatchExecution operation.
     * @callback module:api/ImageClassificationApi~startBatchExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartBatchExecutionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consume the ImageClassification web service asynchronously.
     * @param {Array.<module:model/InputParameters>} batchWebServiceParameters Input parameters to the web service.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.parallelCount Number of threads used to process entries in the batch. Default value is 10. Please make sure not to use too high of a number because it might negatively impact performance.
     * @param {module:api/ImageClassificationApi~startBatchExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartBatchExecutionResponse}
     */
    this.startBatchExecution = function(batchWebServiceParameters, opts, callback) {
      opts = opts || {};
      var postBody = batchWebServiceParameters;

      // verify the required parameter 'batchWebServiceParameters' is set
      if (batchWebServiceParameters === undefined || batchWebServiceParameters === null) {
        throw new Error("Missing the required parameter 'batchWebServiceParameters' when calling startBatchExecution");
      }


      var pathParams = {
      };
      var queryParams = {
        'parallelCount': opts['parallelCount'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Bearer'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StartBatchExecutionResponse;

      return this.apiClient.callApi(
        '/api/ImageClassification/1.0.0/batch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
